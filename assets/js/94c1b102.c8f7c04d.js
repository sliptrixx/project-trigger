"use strict";(self.webpackChunkproject_trigger=self.webpackChunkproject_trigger||[]).push([[708],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(a),u=i,m=h["".concat(s,".").concat(u)]||h[u]||d[u]||o;return a?n.createElement(m,r(r({ref:t},c),{},{components:a})):n.createElement(m,r({ref:t},c))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},745:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const o={sidebar_position:5},r="Tutorial: Health",l={unversionedId:"Tutorials/health",id:"Tutorials/health",title:"Tutorial: Health",description:"In this section we will go over how we can modify our code and design a developer friendly APIs to make our code more reusable and functional. We will do this by adding a health functionality to our little game using a health component.",source:"@site/docs/Tutorials/5_health.md",sourceDirName:"Tutorials",slug:"/Tutorials/health",permalink:"/project-trigger/docs/Tutorials/health",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Tutorial: Collision Detection",permalink:"/project-trigger/docs/Tutorials/collision_detection"},next:{title:"Tutorial: Basic Enemy",permalink:"/project-trigger/docs/Tutorials/basic_enemy"}},s={},p=[{value:"Health.cs",id:"healthcs",level:2},{value:"Additional Functionality",id:"additional-functionality",level:3},{value:"Final Health.cs",id:"final-healthcs",level:3},{value:"Modifying the Projectile Script",id:"modifying-the-projectile-script",level:2},{value:"Testing",id:"testing",level:3},{value:"Bonus Tips",id:"bonus-tips",level:2}],c={toc:p};function d(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tutorial-health"},"Tutorial: Health"),(0,i.kt)("p",null,"In this section we will go over how we can modify our code and design a developer friendly APIs to make our code more reusable and functional. We will do this by adding a health functionality to our little game using a health component."),(0,i.kt)("h2",{id:"healthcs"},"Health.cs"),(0,i.kt)("p",null,"We will create a new script called ",(0,i.kt)("inlineCode",{parentName:"p"},"Health.cs")," that will be responsible for storing the current health points of a GameObject and can be damaged from other GameObjects."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"[SerializeField] protected int hp = 1;\n\npublic void ApplyDamage(int damage)\n{\n    hp -= damage;\n}\n")),(0,i.kt)("p",null,"By making the ",(0,i.kt)("inlineCode",{parentName:"p"},"hp")," variable ",(0,i.kt)("inlineCode",{parentName:"p"},"protected"),", we are preventing other scripts from directly modifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"hp")," variable. This is a good practice to follow as we developers are humans and we can easily make mistakes. This way we are forcing other scripts to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ApplyDamage")," function to modify the ",(0,i.kt)("inlineCode",{parentName:"p"},"hp")," variable, so we don't have to worry about other scripts modifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"hp")," variable directly to like say, set it to 1000."),(0,i.kt)("p",null,"Forcing the use of the ",(0,i.kt)("inlineCode",{parentName:"p"},"ApplyDamage")," function also allows us to add more functionality to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ApplyDamage")," function in the future. For example, we can log the damage taken, play a sound effect when the object is damaged, or even prevent the object from being damaged if it is in an invulnerable state."),(0,i.kt)("h3",{id:"additional-functionality"},"Additional Functionality"),(0,i.kt)("p",null,"Now, we can add some additional functionality to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ApplyDamage")," function to destroy the GameObject if the ",(0,i.kt)("inlineCode",{parentName:"p"},"hp")," variable is less than or equal to 0. I would like to say that there are many ways to do this, like, checking if the ",(0,i.kt)("inlineCode",{parentName:"p"},"hp")," variable is leas than or equal to 0 in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Update")," function, and this is just one way of doing it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"hp -= damage;\nif(hp <= 0)\n{\n    Destroy(gameObject);\n}\n")),(0,i.kt)("p",null,'This is a good place to reuse functions and add a utility function that can "heal" the GameObject. This is useful if we want to add a powerup that can heal the player.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public void ApplyHeal(int heals)\n{\n    ApplyDamage(-heals);\n}\n")),(0,i.kt)("h3",{id:"final-healthcs"},"Final Health.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using UnityEngine;\n\npublic class Health : MonoBehaviour\n{\n    [SerializeField] protected int hp = 1;\n\n    // Apply damage to the object\n    public void ApplyDamage(int damage)\n    {\n        hp -= damage;\n        \n        // if the health drops below zero destroy the object\n        if(hp <= 0)\n        {\n            Destroy(gameObject);\n        }\n    }\n\n    // Apply heals to the object\n    public void ApplyHeals(int heals)\n    {\n        // basically reverse damage\n        ApplyDamage(-heals);\n    }\n}\n")),(0,i.kt)("h2",{id:"modifying-the-projectile-script"},"Modifying the Projectile Script"),(0,i.kt)("p",null,"Now that we have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Health.cs")," script, we can modify our ",(0,i.kt)("inlineCode",{parentName:"p"},"Projectile.cs")," script to use the Health component to apply damage instead of directly destroying the GameObject."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"void OnTriggerEnter2D(Collider2D other)\n{\n    // get the health component and if it exists apply damage of 1 to it\n    var health = other.GetComponent<Health>();\n    if(health != null) \n    {\n        health.ApplyDamage(1);\n    }\n\n    Destroy(gameObject);\n}\n")),(0,i.kt)("h3",{id:"testing"},"Testing"),(0,i.kt)("p",null,"Now let's put this all together and test it out. We will first add the Health component to the Meteor GameObjects and set the ",(0,i.kt)("inlineCode",{parentName:"p"},"hp")," field to 3. Run the game and try shooting at the meteors. You should see that the meteors are destroyed after 3 shots. Try modifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"hp")," field and see how it affects the game."),(0,i.kt)("h2",{id:"bonus-tips"},"Bonus Tips"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We can add a ",(0,i.kt)("inlineCode",{parentName:"li"},"IsDead")," function to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Health.cs")," script and use it to check if the GameObject is dead or not. This is useful if we want to add an enemy AI that stops shooting at a target that is dead."),(0,i.kt)("li",{parentName:"ul"},"The reason why I am using a protected variable instead of a private variable is because this allows us to inherit from the ",(0,i.kt)("inlineCode",{parentName:"li"},"Health")," base class to create a new class that can modify the ",(0,i.kt)("inlineCode",{parentName:"li"},"hp")," variable in a more interesting way. For example, we can create a ",(0,i.kt)("inlineCode",{parentName:"li"},"RechargeableHealth")," class that can recharge the ",(0,i.kt)("inlineCode",{parentName:"li"},"hp")," variable over time after not taking damage for a certain amount of time.")))}d.isMDXComponent=!0}}]);