"use strict";(self.webpackChunkproject_trigger=self.webpackChunkproject_trigger||[]).push([[666],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(a),h=r,m=p["".concat(s,".").concat(h)]||p[h]||d[h]||i;return a?n.createElement(m,l(l({ref:t},u),{},{components:a})):n.createElement(m,l({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(6010);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>T});var n=a(7462),r=a(7294),i=a(6010),l=a(2466),o=a(6550),s=a(1980),c=a(7392),u=a(12);function p(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function d(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??p(a);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function h(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function f(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,i=d(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[s,c]=m({queryString:a,groupId:n}),[p,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,i]=(0,u.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:n}),g=(()=>{const e=s??p;return h({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),f(e)}),[c,f,i]),tabValues:i}}var g=a(2389);const b="tabList__CuJ",y="tabItem_LNqP";function v(e){let{className:t,block:a,selectedValue:o,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const t=e.currentTarget,a=u.indexOf(t),n=c[a].value;n!==o&&(p(t),s(n))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:h,onClick:d},l,{className:(0,i.Z)("tabs__item",y,l?.className,{"tabs__item--active":o===t})}),a??t)})))}function k(e){let{lazy:t,children:a,selectedValue:n}=e;if(a=Array.isArray(a)?a:[a],t){const e=a.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=f(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",b)},r.createElement(v,(0,n.Z)({},e,t)),r.createElement(k,(0,n.Z)({},e,t)))}function T(e){const t=(0,g.Z)();return r.createElement(w,(0,n.Z)({key:String(t)},e))}},1493:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var n=a(7462),r=(a(7294),a(3905)),i=a(4866),l=a(5162);const o={sidebar_position:5},s="Tutorial: Health",c={unversionedId:"Basic Tutorials/health",id:"Basic Tutorials/health",title:"Tutorial: Health",description:"In this section, we will go over how we can modify our code and design developer-friendly APIs to make our code more reusable and functional. We will do this by adding a health functionality to our little game using a health component.",source:"@site/docs/Basic Tutorials/5_health.md",sourceDirName:"Basic Tutorials",slug:"/Basic Tutorials/health",permalink:"/project-trigger/docs/Basic Tutorials/health",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Tutorial: Collision Detection",permalink:"/project-trigger/docs/Basic Tutorials/collision_detection"},next:{title:"Tutorial: Basic Enemy",permalink:"/project-trigger/docs/Basic Tutorials/basic_enemy"}},u={},p=[{value:"Health.cs",id:"healthcs",level:2},{value:"Additional Functionality",id:"additional-functionality",level:3},{value:"Modifying the Projectile Script",id:"modifying-the-projectile-script",level:2},{value:"Testing",id:"testing",level:3},{value:"Final Scripts",id:"final-scripts",level:2},{value:"Bonus Tips",id:"bonus-tips",level:2}],d={toc:p};function h(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tutorial-health"},"Tutorial: Health"),(0,r.kt)("p",null,"In this section, we will go over how we can modify our code and design developer-friendly APIs to make our code more reusable and functional. We will do this by adding a health functionality to our little game using a health component."),(0,r.kt)("h2",{id:"healthcs"},"Health.cs"),(0,r.kt)("p",null,"We will create a new script called ",(0,r.kt)("inlineCode",{parentName:"p"},"Health.cs")," that will be responsible for storing the current health points of a GameObject and can be damaged by other GameObjects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[SerializeField] protected int hp = 1;\n\npublic void ApplyDamage(int damage)\n{\n    hp -= damage;\n}\n")),(0,r.kt)("p",null,"By making the ",(0,r.kt)("inlineCode",{parentName:"p"},"hp")," variable ",(0,r.kt)("inlineCode",{parentName:"p"},"protected"),", we are preventing other scripts from directly modifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"hp")," variable. This is a good practice to follow as we developers are humans and we can easily make mistakes. This way we are forcing other scripts to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ApplyDamage")," function to modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"hp")," variable, so we don't have to worry about other scripts modifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"hp")," variable directly to like say, set it to 1000."),(0,r.kt)("p",null,"Forcing the use of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ApplyDamage")," function also allows us to add more functionality to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ApplyDamage")," function in the future. For example, we can log the damage taken, play a sound effect when the object is damaged, or even prevent the object from being damaged if it is in an invulnerable state."),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"// Get the health from the health component\npublic int GetHP() \n{\n    return hp;\n}\n")),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"hp")," variable being protected we must create a public function called ",(0,r.kt)("inlineCode",{parentName:"p"},"GetHP")," that can be used by other scripts to get the current health points of a GameObject. This is not the only way to do this and there's a better way to do it. In C#, we can use properties to make a variable accessible to other scripts but not allow them to modify it. You can learn more about it from ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties"},"here"),"."),(0,r.kt)("h3",{id:"additional-functionality"},"Additional Functionality"),(0,r.kt)("p",null,"Now, we can add some additional functionality to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ApplyDamage")," function to destroy the GameObject if the ",(0,r.kt)("inlineCode",{parentName:"p"},"hp")," variable is less than or equal to 0. I would like to say that there are many ways to do this, like, checking if the ",(0,r.kt)("inlineCode",{parentName:"p"},"hp")," variable is less than or equal to 0 in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Update")," function, and this is just one way of doing it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"hp -= damage;\nif(hp <= 0)\n{\n    Destroy(gameObject);\n}\n")),(0,r.kt)("p",null,'This is a good place to reuse functions and add a utility function that can "heal" the GameObject. This is useful if we want to add a power-up that can heal the player.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public void ApplyHeal(int heals)\n{\n    ApplyDamage(-heals);\n}\n")),(0,r.kt)("h2",{id:"modifying-the-projectile-script"},"Modifying the Projectile Script"),(0,r.kt)("p",null,"Now that we have a ",(0,r.kt)("inlineCode",{parentName:"p"},"Health.cs")," script, we can modify our ",(0,r.kt)("inlineCode",{parentName:"p"},"Projectile.cs")," script to use the Health component to apply damage instead of directly destroying the GameObject."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"void OnTriggerEnter2D(Collider2D other)\n{\n    // get the health component and if it exists apply damage of 1 to it\n    var health = other.GetComponent<Health>();\n    if(health != null) \n    {\n        health.ApplyDamage(1);\n    }\n\n    Destroy(gameObject);\n}\n")),(0,r.kt)("h3",{id:"testing"},"Testing"),(0,r.kt)("p",null,"Now let's put this all together and test it out. We will first add the Health component to the Meteor GameObjects and set the ",(0,r.kt)("inlineCode",{parentName:"p"},"hp")," field to 3. Run the game and try shooting at the meteors. You should see that the meteors are destroyed after 3 shots. Try modifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"hp")," field and see how it affects the game."),(0,r.kt)("h2",{id:"final-scripts"},"Final Scripts"),(0,r.kt)("p",null,"Here are the final scripts for reference."),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Health.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using UnityEngine;\n\npublic class Health : MonoBehaviour\n{\n    [SerializeField] protected int hp = 1;\n\n    // Apply damage to the object\n    public void ApplyDamage(int damage)\n    {\n        hp -= damage;\n        \n        // if the health drops below zero destroy the object\n        if(hp <= 0)\n        {\n            Destroy(gameObject);\n        }\n    }\n\n    // Apply heals to the object\n    public void ApplyHeals(int heals)\n    {\n        // basically reverse the damage\n        ApplyDamage(-heals);\n    }\n\n    // Get the health from the health component\n    public int GetHP() \n    {\n        return hp;\n    }\n}\n"))),(0,r.kt)(l.Z,{value:"Projectile.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using UnityEngine;\n\npublic class Projectile : MonoBehaviour\n{\n    [Tooltip("The speed at which the projectile travels")]\n    [SerializeField] protected float Speed = 5;\n\n    [Tooltip("The max distance it can travel, before the projectile gets destroyed")]\n    [SerializeField] protected float MaxDistance = 10;\n\n    // how much distance has the projectile travelled?\n    float distanceTravelled = 0;\n\n    // called every frame\n    void Update()\n    {\n        // move it in the direction the object is looking at factored by speed\n        transform.position += transform.up * (Speed * Time.deltaTime);\n        \n        // increment the variable tracking the total distance travelled by the projectile,\n        // then check if it has travelled past the max distance\n        distanceTravelled += Speed * Time.deltaTime;\n        if(distanceTravelled >= MaxDistance)\n        {\n            // destroy the projectile if it has travelled more than the max distance\n            Destroy(gameObject);\n        }\n\n    }\n\n    // called when the projectile has a collision\n    void OnTriggerEnter2D(Collider2D collision)\n    {\n        // get the health component and if it exists apply damage of 1 to it\n        var health = collision.GetComponent<Health>();\n        if(health != null)\n        {\n            health.ApplyDamage(1);\n        }\n\n        Destroy(gameObject); \n    }\n}\n')))),(0,r.kt)("h2",{id:"bonus-tips"},"Bonus Tips"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We can add an ",(0,r.kt)("inlineCode",{parentName:"li"},"IsDead")," function to the ",(0,r.kt)("inlineCode",{parentName:"li"},"Health.cs")," script and use it to check if the GameObject is dead or not. This is useful if we want to add an enemy AI that stops shooting at a target that is dead."),(0,r.kt)("li",{parentName:"ul"},"The reason why I am using a protected variable instead of a private variable is that this allows us to inherit from the ",(0,r.kt)("inlineCode",{parentName:"li"},"Health")," base class to create a new class that can modify the ",(0,r.kt)("inlineCode",{parentName:"li"},"hp")," variable more interestingly. For example, we can create a ",(0,r.kt)("inlineCode",{parentName:"li"},"RechargeableHealth")," class that can recharge the ",(0,r.kt)("inlineCode",{parentName:"li"},"hp")," variable over time after not taking damage for a certain amount of time.")))}h.isMDXComponent=!0}}]);